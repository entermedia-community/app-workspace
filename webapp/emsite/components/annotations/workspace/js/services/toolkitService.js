// Generated by CoffeeScript 1.4.0

Workspace.factory('toolkitService', function() {
  return {
    init: function(scopevar) {
      var getSelf, toolkit;
      getSelf = function(name) {
        return _.find(toolkit, {
          name: name
        });
      };
      return toolkit = [
        {
          name: 'disabled',
          properties: {
            isDrawingMode: false
          },
          annotating: false
        }, {
          name: 'draw',
          properties: {
            isDrawingMode: true
          },
          annotating: true
        }, {
          name: 'move',
          properties: {
            isDrawingMode: false
          },
          annotating: false
        }, {
          name: 'shape',
          properties: {
            isDrawingMode: false
          },
          annotating: true,
          type: 'circle',
          types: [
            {
              name: 'circle',
              type: fabric.Circle,
              blank: {
                radius: 1,
                strokeWidth: 5,
                selectable: false,
                fill: "",
                originX: 'left',
                originY: 'top'
              },
              drawparams: function(pointer) {
                return {
                  radius: Math.abs(scopevar.left - pointer.x)
                };
              }
            }, {
              name: 'rectangle',
              type: fabric.Rect,
              blank: {
                height: 1,
                width: 1,
                strokeWidth: 5,
                selectable: false,
                fill: "",
                originX: 'left',
                originY: 'top'
              },
              drawparams: function(pointer) {
                return {
                  width: -scopevar.left + pointer.x,
                  height: -scopevar.top + pointer.y
                };
              }
            }
          ],
          events: {
            mouseup: function(e, canvas) {
              return scopevar.mouseDown = false;
            },
            mousedown: function(e, canvas) {
              var pointer, shape, spec, type, we;
              scopevar.mouseDown = true;
              pointer = canvas.getPointer(e.e);
              we = getSelf('shape');
              type = _.findWhere(scopevar.currentTool.types, {
                name: scopevar.currentTool.type
              });
              spec = type.blank;
              spec.stroke = scopevar.colorpicker.hex;
              spec.left = pointer.x;
              spec.top = pointer.y;
              shape = new type.type(spec);
              canvas.add(shape);
              return em.unit;
            },
            objectadded: null,
            mousemove: function(e, canvas) {
              var pointer, shape, type, we;
              if (scopevar.mouseDown) {
                we = getSelf('shape');
                pointer = canvas.getPointer(e.e);
                shape = canvas.getObjects()[canvas.getObjects().length - 1];
                type = _.findWhere(scopevar.currentTool.types, {
                  name: scopevar.currentTool.type
                });
                shape.set(type.drawparams(pointer));
                canvas.renderAll();
              }
              return em.unit;
            }
          }
        }, {
          name: 'comment',
          properties: {
            isDrawingMode: false
          },
          annotating: true,
          events: {
            mouseup: null,
            mousedown: null,
            objectadded: null
          }
        }, {
          name: 'arrow',
          properties: {
            isDrawingMode: false
          },
          annotating: true
        }, {
          name: 'text',
          properties: {
            isDrawingMode: false
          },
          annotating: true
        }, {
          name: 'zoom',
          properties: {
            isDrawingMode: false
          },
          annotating: false,
          events: {
            mouseup: null,
            mousemove: function(o, canvas) {
              var SCALE_FACTOR, delta, klass, objects, pointer, transform, _i, _len;
              if (scopevar.mouseDown) {
                SCALE_FACTOR = 0.01;
                pointer = canvas.getPointer(o.e);
                delta = scopevar.left - pointer.x;
                objects = canvas.getObjects();
                delta = delta * SCALE_FACTOR;
                transform = [1 + delta, 0, 0, 1 + delta, 0, 0];
                console.log(transform);
                for (_i = 0, _len = objects.length; _i < _len; _i++) {
                  klass = objects[_i];
                  klass.transformMatrix = transform;
                  klass.setCoords();
                }
                canvas.backgroundImage.transformMatrix = transform;
                canvas.setWidth(canvas.backgroundImage.width * canvas.backgroundImage.transformMatrix[0]);
                return canvas.setHeight(canvas.backgroundImage.height * canvas.backgroundImage.transformMatrix[3]);
              }
            },
            mousedown: function(o, canvas) {
              return scopevar.left = canvas.getPointer(o.e).x;
            }
          }
        }, {
          name: 'colorpicker',
          properties: {},
          annotating: false
        }, {
          name: 'load',
          properties: {},
          annotating: false
        }, {
          name: 'export',
          properties: {},
          annotating: false
        }
      ];
    }
  };
});
